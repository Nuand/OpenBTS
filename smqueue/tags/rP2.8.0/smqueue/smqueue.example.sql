PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE CONFIG (KEYSTRING TEXT UNIQUE NOT NULL, VALUESTRING TEXT, STATIC INTEGER DEFAULT 0, OPTIONAL INTEGER DEFAULT 0, COMMENTS TEXT DEFAULT '');
INSERT INTO "CONFIG" VALUES('Log.Level','DEBUG',0,0,'Default logging level when no other level is defined for a file.');
INSERT INTO "CONFIG" VALUES('Log.Level.smcommands.cpp','DEBUG',0,0,'Log level for short codes.');
INSERT INTO "CONFIG" VALUES('Log.Alarms.Max','20',0,0,'Maximum number of alarms to remember inside the application.');
INSERT INTO "CONFIG" VALUES('Asterisk.address','127.0.0.1',0,0,'The Asterisk/SIP PBX IP address.');
INSERT INTO "CONFIG" VALUES('SIP.myPort','5063',0,0,'The port that smqueue should bind to.');
INSERT INTO "CONFIG" VALUES('SIP.myIP','127.0.0.1',0,0,'The internal IP address. Usually 127.0.0.1.');
INSERT INTO "CONFIG" VALUES('SIP.myIP2','192.168.0.100',0,0,'The external IP address that is communciated to the SIP endpoints.');
INSERT INTO "CONFIG" VALUES('SIP.Proxy.Registration','127.0.0.1:5060',0,0,'The IP host and port of the proxy to be used for registration and authentication. This is OpenRegistry, for example.');
INSERT INTO "CONFIG" VALUES('Debug.print_as_we_validate','',0,1,'');
INSERT INTO "CONFIG" VALUES('SIP.GlobalRelay.IP','',1,0,'IP address of global relay to send unresolvable messages to. NULL disables the gateway.');
INSERT INTO "CONFIG" VALUES('SIP.GlobalRelay.Port','',1,0,'Port of global relay to send unresolvable messages to.');
INSERT INTO "CONFIG" VALUES('SIP.GlobalRelay.ContentType','application/vnd.3gpp.sms',1,0,'The content type that the global relay expects. text/plain and application/vnd.3gpp.sms are the only valid options.');
INSERT INTO "CONFIG" VALUES('SMS.FakeSrcSMSC','0000',0,0,'Use this to fill in L4 SMSC address in SMS delivery.');
INSERT INTO "CONFIG" VALUES('savefile', '/tmp/save',0,0,'The file to save SMS messages to when exiting.');
INSERT INTO "CONFIG" VALUES('Bounce.Code', '101',0,0,'The short code that bounced messages originate from.');
INSERT INTO "CONFIG" VALUES('Bounce.Message.IMSILookupFailed','Cannot determine return address; bouncing message.  Text your phone number to 101 to register and try again.',0,0,'The Bounce message that is sent when the originating IMSI cannot be verified.');
INSERT INTO "CONFIG" VALUES('Bounce.Message.NotRegistered','Phone not registered here.',0,0,'Bounce messafe indicating that the destination phone is not regsitered.');
INSERT INTO "CONFIG" VALUES('SC.Register.Code','101',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.Register.Msg.WelcomeA','Hello',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.Register.Msg.WelcomeB','! Text to 411 for system status.',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.Register.Msg.AlreadyA','Your phone is already registered as',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.Register.Msg.AlreadyB','.',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.Register.Msg.TakenA','The phone number',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.Register.Msg.TakenB','is already in use. Try another, then call that one to talk to whoever took yours.',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.Register.Msg.ErrorA','Error in assigning',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.Register.Msg.ErrorB','to IMSI',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.Register.Digits.Max','10',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.Register.Digits.Min','7',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.Register.Digits.Override','',1,0,'');
INSERT INTO "CONFIG" VALUES('SC.Info.Code','411',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.DebugDump.Code','2336',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.QuickChk.Code','2337',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.ZapQueued.Code','2338',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.ZapQueued.Password','6000',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.WhiteList.Code','2339',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.WhiplashQuit.Code','314158',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.WhiplashQuit.Password','Snidely',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.WhiplashQuit.SaveFile','testsave.txt',0,0,'');
INSERT INTO "CONFIG" VALUES('SC.Email.Code','500',0,0,'Email message shortcode.');
INSERT INTO "CONFIG" VALUES('SC.Email.MailCommand','sendmail -t',0,0,'The command to execute to send emails.');
INSERT INTO "CONFIG" VALUES('SC.Email.DefaultSubj','Mobile Email',0,0,'Default subject for email messages.');
INSERT INTO "CONFIG" VALUES('SC.Email.Domain','my.domain.com',0,0,'Email message origination domain.');
INSERT INTO "CONFIG" VALUES('SC.Email.ContentType','text/plain',0,0,'The default content type of email message.s');
INSERT INTO "CONFIG" VALUES('SC.Email.Header','',0,0,'The header attached to email messages.');
INSERT INTO "CONFIG" VALUES('SC.Email.Footer','Messaging powered by OpenBTS',0,0,'Footer attached to email messagess.');
INSERT INTO "CONFIG" VALUES('SubscriberRegistry.A3A8','/OpenBTS/comp128',0,0,'Location of the program that encrypts RAND and Ki');
INSERT INTO "CONFIG" VALUES('SubscriberRegistry.HTTP.Server','http://127.0.0.1/cgi/subscriberserver.cgi',0,0,'URL of the subscriber registry server.');
INSERT INTO "CONFIG" VALUES('SubscriberRegistry.db','/var/lib/asterisk/sqlite3dir/sqlite3.db',0,0,'The location of the sqlite3 database holding the subscriber registry.');
INSERT INTO "CONFIG" VALUES('SC.SMSC.Code','smsc',0,0,'The SMSC entry point. There is where OpenBTS sends SIP MESSAGES to.');
COMMIT;
